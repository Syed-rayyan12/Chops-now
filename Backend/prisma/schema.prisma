generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                  @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String               @unique
  password       String
  phone          String?              @unique
  role           Role
  createdAt      DateTime             @default(now())
  addresses      Address[]
  cartItems      CartItem[]
  earnings       Earning[]
  customerOrders Order[]              @relation("CustomerOrders")
  riderOrders    Order[]              @relation("RiderOrders")
  ratings        Rating[]
  riderSessions  RiderOnlineSession[]
}

model Restaurant {
  id             Int            @id @default(autoincrement())
  name           String
  slug           String         @unique
  phone          String
  address        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  ownerEmail     String         @unique
  ownerFirstName String
  ownerLastName  String
  coverImage     String?
  cuisineType    String?
  deliveryFee    Float          @default(0)
  deliveryTime   String         @default("30-45 min")
  description    String?
  distance       Float          @default(0)
  featured       Boolean        @default(false)
  image          String?
  minimumOrder   Float          @default(15)
  openingHours   String         @default("9:00 AM - 10:00 PM")
  priceRange     String         @default("££")
  rating         Float          @default(0)
  reviewCount    Int            @default(0)
  serviceFee     Float          @default(2.99)
  menuItems      MenuItem[]
  menuCategories MenuCategory[]
  orders         Order[]

  @@index([deletedAt])
}

model Rider {
  id                               Int      @id @default(autoincrement())
  firstName                        String
  lastName                         String
  email                            String   @unique
  phone                            String
  password                         String
  personalDetails                  String?
  address                          String?
  idDocument                       String?
  proofOfAddress                   String?
  selfie                           String?
  vehicle                          String?
  insurance                        String?
  insuranceExpiryReminder          String?
  accountNumber                    String?
  sortCode                         String?
  deliveryPartnerAgreementAccepted Boolean  @default(false)
  createdAt                        DateTime @default(now())
}

model Order {
  id              Int         @id @default(autoincrement())
  code            String      @unique
  customerId      Int
  restaurantId    Int
  riderId         Int?
  status          OrderStatus @default(PENDING)
  subTotal        Decimal     @db.Decimal(10, 2)
  deliveryFee     Decimal     @db.Decimal(10, 2)
  tip             Decimal     @db.Decimal(10, 2)
  riderPayout     Decimal     @db.Decimal(10, 2)
  distanceKm      Decimal?    @db.Decimal(6, 2)
  assignedAt      DateTime?
  pickedUpAt      DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  amount          Decimal     @db.Decimal(10, 2)
  addressId       Int?
  deliveryAddress String?
  earnings        Earning[]
  address         Address?    @relation(fields: [addressId], references: [id])
  customer        User        @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  rider           User?       @relation("RiderOrders", fields: [riderId], references: [id])
  items           OrderItem[]
  ratings         Rating?

  @@index([riderId])
  @@index([restaurantId])
  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  title     String
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model RiderOnlineSession {
  id        Int       @id @default(autoincrement())
  riderId   Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  rider     User      @relation(fields: [riderId], references: [id])

  @@index([riderId, startedAt])
}

model Rating {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  riderId   Int
  score     Int
  comment   String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  rider     User     @relation(fields: [riderId], references: [id])

  @@index([riderId])
}

model Earning {
  id      Int      @id @default(autoincrement())
  riderId Int
  orderId Int
  amount  Decimal  @db.Decimal(10, 2)
  date    DateTime @default(now())
  order   Order    @relation(fields: [orderId], references: [id])
  rider   User     @relation(fields: [riderId], references: [id])

  @@index([riderId])
  @@index([orderId])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]

  @@index([userId])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  menuItemId Int
  quantity   Int
  createdAt  DateTime @default(now())
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([menuItemId])
}

model MenuCategory {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  name         String
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menuItems    MenuItem[]

  @@index([restaurantId])
}

model MenuItem {
  id           Int           @id @default(autoincrement())
  restaurantId Int
  categoryId   Int?
  name         String
  description  String?
  price        Decimal       @db.Decimal(10, 2)
  category     String
  image        String?
  isAvailable  Boolean       @default(true)
  allergyInfo  String?
  isVegetarian Boolean       @default(false)
  isVegan      Boolean       @default(false)
  isGlutenFree Boolean       @default(false)
  displayOrder Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartItems    CartItem[]
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  menuCategory MenuCategory? @relation(fields: [categoryId], references: [id])

  @@index([restaurantId])
  @@index([categoryId])
}

enum Role {
  USER
  RIDER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PENDING
  PREPARING
  READY_FOR_PICKUP
  PICKED_UP
  DELIVERED
  CANCELLED
}
